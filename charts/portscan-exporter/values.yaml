portscan:
  # -- Number of replicas for the portscanner. Only set if `autoscaling.enabled=false`
  replicaCount: 1
  image:
    registry: ghcr.io
    repository: nce/gs-hiring-task

    # -- Image tag for the portscanning application
    tag: 307f380

    # -- ImagePullSecrets; They need to be created beforehand
    # -- https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    pullSecrets:
    - nce-ghcr

    # -- As we set the `tag` to git commits, `IfNotPresent` should be okay
    pullPolicy: IfNotPresent

  # -- SecurityContext enforced on the container
  containerSecurityContext:
    enabled: false

  # -- SecurityContext enforced on the pod
  podSecurityContext:
    enabled: false
#  initContainers:
#  command:
#  args:

  # -- Additional Environment Variables for the management of the application
  # -- Refer to xxx for ENV options (`./portscan-exporter -h`)
  extraEnvVars:
    - name: RATELIMIT
      value: "35"
    - name: LOGLEVEL
      value: "DEBUG"

  # -- Ports the container exposes
  containerPorts:
    metrics: 10000
    health: 12000

  # -- LivenessProbe configuration
  livenessProbe:
    enabled: true
    httpGet:
      port: healthcheck
      path: /health
  # -- ReadinessProbe configuration
  readinessProbe:
    enabled: true
    httpGet:
      port: healthcheck
      path: /ready


# -- Enable if autoscaling is available (hpa)
autoscaling:
  enabled: false

# -- A dedicated serviceAccount is best practice for the application
serviceAccount:
  create: true
  # -- Name of the dedicated service-account
  name: portscanner
  automountServiceAccountToken: true


metrics:
  enabled: true
  # -- If the kube-prometheus stack is used, configure the `serviceMonitor`
  serviceMonitor:
    enabled: false
    namespace: ""
    ## @param metrics.serviceMonitor.annotations Additional custom annotations for the ServiceMonitor
    ##
    annotations: {}
    ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
    ##
    labels: {}
    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in Prometheus
    ##
    jobLabel: ""
    ## @param metrics.serviceMonitor.honorLabels honorLabels chooses the metric's labels on collisions with target labels
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped.
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ## e.g:
    ## interval: 10s
    ##
    interval: ""
    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ## e.g:
    ## scrapeTimeout: 10s
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.metricRelabelings Specify additional relabeling of metrics
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.relabelings Specify general relabeling
    ##
    relabelings: []
    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
    ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
    ## selector:
    ##   prometheus: my-prometheus
    ##
    selector: {}

# -- Along the `serviceAccount` we need special ClusterRoles
rbac:
  create: true

# -- Service Configuration for the endpoints
service:
  type: ClusterIP
  # -- Portname to portnumber configuration
  ports:
    metrics: 12000

